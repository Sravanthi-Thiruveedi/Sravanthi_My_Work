{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "975a589a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import datetime as dt\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "a8b865c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Race</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Male</td>\n",
       "      <td>Black/African-American</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Gender                    Race\n",
       "2   Male  Black/African-American"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#21 Which demographic patients are prone to get stroke\n",
    "\n",
    "df = pd.read_excel(\"HospitalDatabase .xlsx\", \"Discharges\")\n",
    "dfs = df[df['PrimaryDiagnosis']=='Stroke']\n",
    "dfp = pd.read_excel(\"HospitalDatabase .xlsx\", \"Patients\")\n",
    "df_stroke = (dfp.loc[(dfs.PatientID)])\n",
    "df_count = df_stroke.groupby(['Gender','Race'])['PatientID'] \\\n",
    ".count() \\\n",
    ".reset_index(name ='Number of Patients') \\\n",
    ".sort_values(['Number of Patients'],ascending=False) \\\n",
    ".head(1)\n",
    "df_count[['Gender','Race']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "6bd14a1a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Count of No. of Patients</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acuity</th>\n",
       "      <th>EDDisposition</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">1</th>\n",
       "      <th>Admitted</th>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Discharged</th>\n",
       "      <td>558</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">2</th>\n",
       "      <th>Admitted</th>\n",
       "      <td>116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Discharged</th>\n",
       "      <td>66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <th>Admitted</th>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">4</th>\n",
       "      <th>Admitted</th>\n",
       "      <td>107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Discharged</th>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">5</th>\n",
       "      <th>Admitted</th>\n",
       "      <td>179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Discharged</th>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Count of No. of Patients\n",
       "Acuity EDDisposition                          \n",
       "1      Admitted                             32\n",
       "       Discharged                          558\n",
       "2      Admitted                            116\n",
       "       Discharged                           66\n",
       "3      Admitted                             81\n",
       "4      Admitted                            107\n",
       "       Discharged                           30\n",
       "5      Admitted                            179\n",
       "       Discharged                           30"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#22 Create a dataframe with acuity and EDDisposition as the indices and count of number of patients as the value\n",
    "\n",
    "df = pd.read_excel(\"HospitalDatabase .xlsx\", \"EDVisits\")\n",
    "df1 = df.groupby(['Acuity','EDDisposition'])['PatientID']\\\n",
    ".count() \\\n",
    ".reset_index(name = 'Count of No. of Patients')\n",
    "df2=df1.set_index(['Acuity','EDDisposition'])\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "e035541c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The list is: [4, 10, 6]\n",
      "Center element in the list: 10\n"
     ]
    }
   ],
   "source": [
    "#23 Write a function to write the center element in the list (one element in odd length list,two elements in even length list)\n",
    "\n",
    "lst = [4, 10, 6]\n",
    "def center():\n",
    "    center_element = int(len(lst) / 2)\n",
    "    return lst[center_element]\n",
    "print('The list is:',lst)\n",
    "print('Center element in the list:',center())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "6a91861f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>EDDisposition</th>\n",
       "      <th>Admitted</th>\n",
       "      <th>Discharged</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ReasonForVisit</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Accident</th>\n",
       "      <td>39.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bleeding</th>\n",
       "      <td>16.0</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Car Accident</th>\n",
       "      <td>17.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chest Pain</th>\n",
       "      <td>94.0</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cough</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fever</th>\n",
       "      <td>46.0</td>\n",
       "      <td>188.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gun Shot</th>\n",
       "      <td>16.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Intoxication</th>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Laceration</th>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Migraine</th>\n",
       "      <td>47.0</td>\n",
       "      <td>109.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pneumonia</th>\n",
       "      <td>136.0</td>\n",
       "      <td>65.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Shortness of Breath</th>\n",
       "      <td>72.0</td>\n",
       "      <td>77.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Stomach Ache</th>\n",
       "      <td>32.0</td>\n",
       "      <td>154.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "EDDisposition        Admitted  Discharged\n",
       "ReasonForVisit                           \n",
       "Accident                 39.0         0.0\n",
       "Bleeding                 16.0        15.0\n",
       "Car Accident             17.0         0.0\n",
       "Chest Pain               94.0        15.0\n",
       "Cough                     0.0         1.0\n",
       "Fever                    46.0       188.0\n",
       "Gun Shot                 16.0         0.0\n",
       "Intoxication              0.0        30.0\n",
       "Laceration                0.0        30.0\n",
       "Migraine                 47.0       109.0\n",
       "Pneumonia               136.0        65.0\n",
       "Shortness of Breath      72.0        77.0\n",
       "Stomach Ache             32.0       154.0"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#24 Get the number of patients based on ReasonForVisit and EDDisposition (use stack/unstack functions)\n",
    "\n",
    "df = pd.read_excel(\"HospitalDatabase .xlsx\",\"EDVisits\",index_col=False)\n",
    "df1 = df[['ReasonForVisit','EDDisposition']].value_counts()\n",
    "df2 = df1.unstack()\n",
    "df3= df2.replace(np.nan,0)\n",
    "df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "c6806cc8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#25 Plot a graph by counting the no. of patients in each department\n",
    "\n",
    "df = pd.read_excel(\"HospitalDatabase .xlsx\",\"AmbulatoryVisits\")\n",
    "df1 = df.groupby(['VisitDepartmentID'])['PatientMRN'].count().reset_index(name = 'Count of Patients')\n",
    "ax = sns.barplot(x='VisitDepartmentID', y='Count of Patients', data=df1)#,order=df1.sort_values('Count of Patients').Service )\n",
    "for i in ax.containers:\n",
    "    ax.bar_label(i,)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "416c989d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Count of Male Patients: 537\n",
      "Count of Female Patients: 408\n"
     ]
    }
   ],
   "source": [
    "#26 Using arrays and loops, find the count of patients based on gender\n",
    "\n",
    "df = pd.read_excel(\"HospitalDatabase .xlsx\",\"Patients\")\n",
    "arr = df[['Gender','PatientID']].to_numpy()\n",
    "Male = 0\n",
    "Female = 0\n",
    "for i in arr:\n",
    "    if i[0]=='Male':\n",
    "        Male +=1\n",
    "    else:\n",
    "        Female +=1\n",
    "print('Count of Male Patients:',Male)\n",
    "print('Count of Female Patients:',Female)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "323ce7fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#27 Plot a graph to count the patients based on discharge disposition\n",
    "\n",
    "df = pd.read_excel(\"HospitalDatabase .xlsx\",\"ReAdmissionRegistry\")\n",
    "df1 = df.groupby(['DischargeDisposition'])['PatientID'].count().reset_index(name = 'Count of Patients')\n",
    "ax = sns.barplot(x='DischargeDisposition', y='Count of Patients', data=df1 )\n",
    "for i in ax.containers:\n",
    "    ax.bar_label(i,)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "322c6233",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ReasonForVisit</th>\n",
       "      <th>Mortality Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Pneumonia</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  ReasonForVisit  Mortality Rate\n",
       "8      Pneumonia              23"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#28 Which reason of visit has maximum mortality rate\n",
    "\n",
    "df = pd.read_excel(\"HospitalDatabase .xlsx\", \"Discharges\")\n",
    "df1 = df[df['DischargeDisposition']=='Expired']\n",
    "df2 = pd.read_excel(\"HospitalDatabase .xlsx\", \"EDVisits\")\n",
    "df3 = (df2.loc[(df1.PatientID)])\n",
    "df4 = df3.groupby(['ReasonForVisit'])['PatientID'] \\\n",
    ".count() \\\n",
    ".reset_index(name = 'Mortality Rate') \\\n",
    ".sort_values(['Mortality Rate'],ascending=False)\\\n",
    ".head(1)\n",
    "df4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "fd2da027",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average LOS: 10.025932\n"
     ]
    }
   ],
   "source": [
    "#29 Claculate average LOS\n",
    "\n",
    "df=pd.read_excel(\"HospitalDatabase .xlsx\", \"Discharges\")\n",
    "df[[\"DischargeDate\",\"AdmissionDate\"]] = df[[\"DischargeDate\",\"AdmissionDate\"]].apply(pd.to_datetime)\n",
    "df[\"los\"] = (df[\"DischargeDate\"]-df[\"AdmissionDate\"])/np.timedelta64(1, 'D')\n",
    "df[\"avg_los\"]= df[\"los\"].sum()/df[\"los\"].count()\n",
    "print(\"Average LOS: %f\"%df[\"avg_los\"].head(1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "ed068d58",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PatientID 23 has most entries in readmission registry\n"
     ]
    }
   ],
   "source": [
    "#30 Which Patient id has most entries in readmission registry\n",
    "\n",
    "df = pd.read_excel(\"HospitalDatabase .xlsx\",\"ReAdmissionRegistry\",header=None,index_col=False)[1]\n",
    "df1=df.value_counts().index[0]\n",
    "print('PatientID',df1,'has most entries in readmission registry')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "84c77d60",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Count of White Spanish Male is 15\n"
     ]
    }
   ],
   "source": [
    "#31 Find the count of White Spanish Male\n",
    "\n",
    "df = pd.read_excel(\"HospitalDatabase .xlsx\",\"Patients\")\n",
    "df1 = df[(df['Gender']=='Male')&(df['Race']=='White')&(df['Language']=='Spanish')]\n",
    "cnt = df1.count()\n",
    "print('Count of White Spanish Male is',cnt[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "df67a2a1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the number to print the multiplication table: 5\n",
      "5 x 1 = 5\n",
      "5 x 2 = 10\n",
      "5 x 3 = 15\n",
      "5 x 4 = 20\n",
      "5 x 5 = 25\n",
      "5 x 6 = 30\n",
      "5 x 7 = 35\n",
      "5 x 8 = 40\n",
      "5 x 9 = 45\n",
      "5 x 10 = 50\n"
     ]
    }
   ],
   "source": [
    "#32 Write a function to print the multiplication of the given number\n",
    "\n",
    "def mult(x):\n",
    "    for i in range(10):\n",
    "        print(number,\"x\",i+1,\"=\",number*(i+1))\n",
    "number = int(input (\"Enter the number to print the multiplication table: \"))\n",
    "mult(number)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "225388f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#33 Using a bar chart which Service had the lowest count of Expected Mortality\n",
    "\n",
    "df = pd.read_excel(\"HospitalDatabase .xlsx\",\"Discharges\")\n",
    "df1 = df.groupby(['Service'])['ExpectedMortality'].count().reset_index(name = 'ExpectedMortality')\n",
    "ax = sns.barplot(x='Service', y=\"ExpectedMortality\", data=df1,order=df1.sort_values('ExpectedMortality').Service )\n",
    "for i in ax.containers:\n",
    "    ax.bar_label(i,)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "ac17fab8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Actual array: \n",
      " [[ 1  2  3  4  5]\n",
      " [ 6  7  8  9 10]\n",
      " [11 12 13 14 15]\n",
      " [16 17 18 19 20]\n",
      " [21 22 23 24 25]\n",
      " [26 27 28 29 30]]\n",
      "Sliced array: \n",
      " [[11 12]\n",
      " [16 17]]\n"
     ]
    }
   ],
   "source": [
    "#34 np.arange(1,31).reshape(6,5) Find the array slicing to get the elements with values 11,12,16,17.\n",
    "\n",
    "arr = np.arange(1,31)\n",
    "newarr = arr.reshape(6,5)\n",
    "print('Actual array: \\n',newarr)\n",
    "print('Sliced array: \\n',newarr[2:4, 0:2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "29cf5695",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Actual array: \n",
      " [[ 1  2  3  4  5]\n",
      " [ 6  7  8  9 10]\n",
      " [11 12 13 14 15]\n",
      " [16 17 18 19 20]\n",
      " [21 22 23 24 25]\n",
      " [26 27 28 29 30]]\n",
      "Sliced array: \n",
      " [ 2  8 14 20]\n"
     ]
    }
   ],
   "source": [
    "#35 np.arange(1,31).reshape(6,5), find array slicing for elements 2,8,14,20.\n",
    "\n",
    "arr = np.arange(1,31)\n",
    "narr = arr.reshape(6,5)\n",
    "d1 = np.delete(narr,0,1)\n",
    "d2 = np.delete(d1,[4,5],0)\n",
    "d3 = np.diag(d2)\n",
    "print('Actual array: \\n',narr)\n",
    "print('Sliced array: \\n',d3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "b2dc454d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Correlation Matrix is : \n",
      "           EDVisitID  PatientID    Acuity\n",
      "EDVisitID   1.000000   0.975477  0.005813\n",
      "PatientID   0.975477   1.000000  0.003545\n",
      "Acuity      0.005813   0.003545  1.000000\n"
     ]
    }
   ],
   "source": [
    "#36 Create a correlation matrix on EDVisits\n",
    "\n",
    "df = pd.read_excel(\"HospitalDatabase .xlsx\",\"EDVisits\")\n",
    "matrix = df.corr()\n",
    "print(\"Correlation Matrix is : \")\n",
    "print(matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "03fe5d4a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the sentence: Python Hackathon Sep 2022\n",
      "Uppercase Letters :  PHS\n"
     ]
    }
   ],
   "source": [
    "#37 Write a function to print all the uppercase letter of a given sentence\n",
    "\n",
    "def func(sent):\n",
    "    upper = ''\n",
    "    for i in sent:\n",
    "        if i.isupper():\n",
    "            upper += i\n",
    "    return upper\n",
    "sent = str(input (\"Enter the sentence: \"))\n",
    "print('Uppercase Letters : ',func(sent))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "b7f74d7c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PrimaryDiagnosis</th>\n",
       "      <th>Number of Patients on Transfer</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afib</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Diabetes</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Flu</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Heart Failure</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Knee Replacement</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Laceration</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Pain</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Pneumonia</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Stroke</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PrimaryDiagnosis  Number of Patients on Transfer\n",
       "0              Afib                               1\n",
       "1          Diabetes                               7\n",
       "2               Flu                               2\n",
       "3     Heart Failure                               9\n",
       "4  Knee Replacement                               1\n",
       "5        Laceration                               1\n",
       "6              Pain                               1\n",
       "7         Pneumonia                               8\n",
       "8            Stroke                               9"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#38 Number of patients on Transfer based on Primary Diagnosis\n",
    "\n",
    "df = pd.read_excel(\"HospitalDatabase .xlsx\", \"Discharges\")\n",
    "df1 = df[df['DischargeDisposition']=='Transfer']\n",
    "df2 = df1.groupby(['PrimaryDiagnosis'])['PatientID'] \\\n",
    ".count() \\\n",
    ".reset_index(name = 'Number of Patients on Transfer')\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "2a58fd7b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     PatientID FirstName  LastName             DateOfBirth\n",
      "12          13   Skippie   Marriot 1978-05-12 20:12:54.106\n",
      "14          15   Gabriel     Saint 1961-11-18 06:47:20.682\n",
      "3            4   Carmine     Texas 1968-10-15 03:32:13.635\n",
      "22          23    Walter      Time 1971-02-20 18:41:59.737\n",
      "24          25  Lincoln     Brenda 1986-07-24 17:36:00.791\n",
      "..         ...       ...       ...                     ...\n",
      "870        871     Tabby    Bowler 1977-02-07 05:35:23.666\n",
      "897        898    Melina  Siseland 1979-08-04 03:48:41.794\n",
      "908        909  Freeland   Hawford 1985-02-08 22:19:00.712\n",
      "910        911    Zulauf    Orbine 1973-06-26 03:13:50.449\n",
      "924        925   Cynthie    Hurtic 1975-02-23 04:02:58.632\n",
      "\n",
      "[116 rows x 4 columns]\n"
     ]
    }
   ],
   "source": [
    "#39 Get the FirstName, LastName, DateOfBirth of the patients whose reason for visit is Migraine.\n",
    "\n",
    "df = pd.read_excel(\"HospitalDatabase .xlsx\", \"EDUnique\")\n",
    "dfm = df[df['ReasonForVisit']=='Migraine']\n",
    "dfp = pd.read_excel(\"HospitalDatabase .xlsx\", \"Patients\")\n",
    "x = (dfp.loc[(dfm.PatientID)])\n",
    "print(x[['PatientID','FirstName','LastName','DateOfBirth']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "5c7f79c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#40 Plot a graph showing the count of patients for the reason visited the hospital\n",
    "\n",
    "df = pd.read_excel(\"HospitalDatabase .xlsx\",\"EDVisits\")\n",
    "df1 = df.groupby(['ReasonForVisit'])['PatientID'].count().reset_index(name = 'Count of Patients')\n",
    "x = df1['Count of Patients']\n",
    "y = df1['ReasonForVisit']\n",
    "plt.pie(x,labels = y,radius=2,autopct = \"%d\")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
